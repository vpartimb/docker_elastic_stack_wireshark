version: '3.8'

services:

    tshark:
        container_name: wireshark
        image: toendeavour/tshark
        volumes:
            - type: bind
              source: ./data
              target: /data
            - ./tshark/convert_pcap.sh:/convert_pcap.sh
        entrypoint: ['/bin/sh', '/convert_pcap.sh']

    logstash:
        container_name: logstash
        build:
            context: logstash/
        volumes:
            - type: bind
              source: ./logstash/config/logstash.yml
              target: /usr/share/logstash/config/logstash.yml
            - type: bind
              source: ./data/json
              target: /data
            - type: bind
              source: ./logstash/pipeline
              target: /usr/share/logstash/pipeline
        ports:
            - "5044:5044"
            - "5000:5000/tcp"
            - "5000:5000/udp"
            - "9600:9600"
        networks:
            - elk
        depends_on: 
            elasticsearch: { condition: service_healthy }

    elasticsearch:
        container_name: elasticsearch
        build:
            context: elasticsearch/
        volumes:
            - type: bind
              source: ./elasticsearch/config/elasticsearch.yml
              target: /usr/share/elasticsearch/config/elasticsearch.yml
              read_only: true
            - type: volume
              source: ./elasticsearch
              target: /usr/share/elasticsearch/data
        ports:
            - "9200:9200"
            - "9300:9300"
        environment:
            ELASTIC_PASSWORD: password
            # Use single node discovery in order to disable production mode and avoid bootstrap checks.
            # see: https://www.elastic.co/guide/en/elasticsearch/reference/current/bootstrap-checks.html
            discovery.type: single-node
        networks:
            - elk
        healthcheck:
            test: ["CMD", "curl","-s" ,"-f", "http://localhost:9200/_cat/health"]

    kibana:
        container_name: kibana
        build:
            context: kibana/
        volumes:
            - type: bind
              source: ./kibana/config/kibana.yml
              target: /usr/share/kibana/config/kibana.yml
        ports:
            - "5601:5601"
        networks:
            - elk
        depends_on:
            elasticsearch: { condition: service_healthy }

networks:
    elk:
        driver: bridge

volumes:
    elasticsearch:
    data:
